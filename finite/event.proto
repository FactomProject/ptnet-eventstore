syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.project.factom.finite.event";
option java_outer_classname = "EventProto";

package finite;

import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

service EventStore {
  rpc Status (Ping) returns (Pong) {}
  rpc ListMachines (MachineQuery) returns (MachineList) {}
  rpc GetMachine (Query) returns (Machine) {}
  rpc GetPlaceMap (Query) returns (PlaceMap) {}
  rpc Dispatch (Command) returns (EventStatus) {}
  rpc GetEvent (Query) returns (EventList) {}
  rpc GetState (Query) returns (StateList) {}
}

message JsonPayload {
  bytes json = 1;
}

message MachineQuery {} // placeholder: no params required

message Ping {
  string nonce = 1;
}

message Pong {
  string nonce = 1;
  int64 code = 2;
}

message Query {
  string schema = 1;
  string id = 2;
  string uuid = 3;
}

message EventList {
  repeated Event list = 1;
}

message StateList {
  repeated State list = 1;
}

message Action {
  string action = 1;
  uint64 multiple = 2;
}

message Command {
  string id = 1;
  string schema = 2;
  string chain = 3;
  repeated Action action = 4;
  uint64 multiple = 5;
  repeated uint64 state = 6;
}

message State {
  string id = 1;
  string schema = 2;
  string chain = 3;
  repeated uint64 state = 4;
  string head = 5;
  google.protobuf.Timestamp created = 6;
  google.protobuf.Timestamp updated = 7;
}

message EventStatus {
  State state = 1;
  int64 code = 2;
  string message = 3;
}

message Event {
  string id = 1;
  string schema = 2;
  string chain = 3;
  repeated Action action = 4;
  google.protobuf.Any payload = 5;
  repeated uint64 state = 6;
  google.protobuf.Timestamp ts = 7;
  string uuid = 8;
  string parent = 9;
}

message Guard {
  repeated int64 delta = 1;
}

message Transition {
  repeated int64 delta = 1;
  string role = 2;
  map<string, Guard> guards = 3;
}

message Schemata {
  repeated string schema = 1;
}

message Place {
  uint64 offset = 1;
  uint64 initial = 2;
  uint64 capacity = 3;
}

message PlaceMap {
  string schema = 1;
  map<string, Place> map = 2;
}

message Machine {
  string schema = 1;
  repeated uint64 initial = 2;
  repeated uint64 capacity = 3;
  map<string, Transition> transitions = 4;
}

message MachineList {
  repeated string list = 1;
}
